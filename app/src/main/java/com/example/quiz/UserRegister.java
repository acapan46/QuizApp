package com.example.quiz;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

//import com.example.myapplication.BookListActivity;
import com.example.quiz.model.User;
//import com.example.myapplication.model.SharedPrefManager;
import com.example.quiz.remote.ApiUtils;
import com.example.quiz.remote.UserService;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Random;

import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;

public class UserRegister extends AppCompatActivity {

    private EditText txtUsername;
    private EditText txtEmail;
    private EditText txtPassword;
    private Context context;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_user_register);

        Button regBtn = (Button) findViewById(R.id.regBtnSubmit);

        // store context
        context = this;

        // get view objects references
        txtUsername = findViewById(R.id.txtUsername);
        txtEmail = findViewById(R.id.txtEmail);
        txtPassword = findViewById(R.id.txtPassword);

        regBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Calendar calendar = Calendar.getInstance();
                String date = sdf.format(calendar.getTime());

                // get values in form
                String username = txtUsername.getText().toString();
                String email = txtEmail.getText().toString();
                String password = txtPassword.getText().toString();
                String token = generateRandomToken(36);
                String lease = date;
                String role = "user";
                int is_active = 1;
                String secret = "206b2dbe-ecc9-490b-b81b-83767288bc5e";

                // convert createdAt date to format in DB
                // reference: https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html

                // create a Book object
                // set id to 0, it will be automatically generated by the db later
                // set image to dummy value
                System.out.println(email);
                System.out.println(username);
                System.out.println(password);
                System.out.println(token);
                System.out.println(lease);
                System.out.println(role);
                System.out.println(is_active);
                System.out.println(secret);
                //User u = new User(0, email, username, password, token, lease, role, is_active, secret);


                // send request to add new book to the REST API
                UserService userService = ApiUtils.getUserService();
                Call<User> call = userService.regUser(0, email, username, password, token, lease, role, is_active, secret);
                // execute
                call.enqueue(new Callback<User>() {
                    @Override
                    public void onResponse(Call<User> call, Response<User> response) {

                        // for debug purpose
                        Log.d("MyApp:", "Response: " + response.raw().toString());

                        // invalid session?
                        if (response.code() == 401)
                            displayAlert("Invalid session. Please re-login");

                        // user added successfully?
                        User addedUser = response.body();
                        if (addedUser != null) {
                            // display message
                            Toast.makeText(context,
                                    addedUser.getUsername() + " added successfully.",
                                    Toast.LENGTH_LONG).show();
                            // end this activity and forward user to BookListActivity
                            Intent intent = new Intent(context, LoginActivity.class);
                            startActivity(intent);
                            finish();
                        } else {
                            displayAlert("Add New User failed.");
                        }
                    }

                    @Override
                    public void onFailure(Call<User> call, Throwable t) {
                        displayAlert("Error [" + t.getMessage() + "]");
                        // for debug purpose
                        Log.d("MyApp:", "Error: " + t.getCause().getMessage());
                    }
                });
            }
        });

    }

    /**
     * Called when Add Book button is clicked
     * @param v
     */

    /**
     * Displaying an alert dialog with a single button
     *
     * @param message - message to be displayed
     */
    public void displayAlert(String message) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setMessage(message)
                .setCancelable(false)
                .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int id) {
                        //do things
                        dialog.cancel();
                    }
                });
        AlertDialog alert = builder.create();
        alert.show();
    }

    public static String MD5_Hash(String s) {
        MessageDigest m = null;

        try {
            m = MessageDigest.getInstance("MD5");
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
        }

        //m.update(s.getBytes(),0,s.length());
        //String hash = new BigInteger(1, m.digest()).toString(16);
        String md5 = new BigInteger(1, m.digest(s.getBytes())).toString(16);
        return String.format("%32s", md5).replace(' ', '0');
        //return hash;
    }

    private String generateRandomToken(int length) {
        // Define characters to be used for token generation
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        // Create a StringBuilder to store the generated token
        StringBuilder tokenBuilder = new StringBuilder(length);
        Random random = new Random();

        // Generate random characters to form the token
        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            char randomChar = characters.charAt(index);
            tokenBuilder.append(randomChar);
        }

        // Convert the StringBuilder to a String and return the generated token
        return tokenBuilder.toString();
    }

}